rules:
- metadata:
    title: S3 bucket acl public readable
  name: bucket_acl_publicly_readable
  output: 'S3 bucket acl public readable, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  aws_s3_bucket_grants\
    \ a2\nWHERE\n  a1.selefra_id = a2.aws_s3_buckets_selefra_id\n  AND a2.grantee\
    \ :: jsonb ->> 'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'\n  AND\
    \ a2.permission IN ('READ_ACP', 'FULL_CONTROL');"
- metadata:
    title: S3 bucket acl public writable
  name: bucket_acl_publicly_writeable
  output: 'S3 bucket acl public writable, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  aws_s3_bucket_grants\
    \ a2\nWHERE\n a1.selefra_id = a2.aws_s3_buckets_selefra_id\n  AND a2.grantee ::\
    \ jsonb ->> 'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'\n  AND a2.permission\
    \ IN ('WRITE_ACP', 'FULL_CONTROL');"
- metadata:
    title: S3 bucket allow http access
  name: bucket_allow_http_access
  output: 'S3 bucket allow http access, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets AS a1 FULL\n  OUTER JOIN\
    \ (\n    SELECT\n      *\n    FROM\n      aws_s3_buckets,\n      jsonb_array_elements(policy\
    \ :: jsonb -> 'Statement') as a2\n    WHERE\n      (\n        a2 ->> 'Effect'\
    \ = 'Allow'\n        AND (\n          a2 -> 'Condition' -> 'Bool' ->> 'aws:SecureTransport'\
    \ = 'true'\n          OR a2 -> 'Condition' -> 'Bool' ->> 'aws:SecureTransport'\
    \ = 'True'\n        )\n      )\n      OR (\n        a2 ->> 'Effect' = 'Deny'\n\
    \        AND (\n          a2 -> 'Condition' -> 'Bool' ->> 'aws:SecureTransport'\
    \ = 'false'\n          OR a2 -> 'Condition' -> 'Bool' ->> 'aws:SecureTransport'\
    \ = 'False'\n        )\n      )\n  ) AS a3 ON a1.selefra_id = a3.selefra_id\n\
    WHERE\n  a1.selefra_id <> a3.selefra_id\n  OR a3.selefra_id IS NULL;"
- metadata:
    title: S3 bucket default encryption disable
  name: bucket_default_encryption_disable
  output: 'S3 bucket default encryption disable, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets AS a1 FULL\n  OUTER JOIN\
    \ (\n    SELECT\n      a2.aws_s3_buckets_selefra_id\n    FROM\n      aws_s3_bucket_encryption_rules\
    \ AS a2\n  ) AS a3 ON a1.selefra_id = a3.aws_s3_buckets_selefra_id\nWHERE\n  a1.selefra_id\
    \ <> a3.aws_s3_buckets_selefra_id\n  OR a3.aws_s3_buckets_selefra_id IS NULL;"
- metadata:
    title: S3 bucket is not configured with cors rules
  name: bucket_is_not_configured_with_cors_rules
  output: 'S3 bucket is not configured with cors rules, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets AS a1 FULL\n  OUTER JOIN\
    \ aws_s3_bucket_cors_rules AS a2 ON a1.selefra_id = a2.aws_s3_buckets_selefra_id\n\
    WHERE\n  aws_s3_buckets_selefra_id IS NULL;"
- metadata:
    title: S3 bucket logging disable
  name: bucket_logging_disable
  output: 'S3 bucket logging disable, arn: {{.arn}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_buckets\nWHERE\n  logging_target_bucket IS NULL\n\
    \  AND logging_target_prefix IS NULL;"
- metadata:
    title: S3 bucket not configured block public access
  name: bucket_not_configured_block_public_access
  output: 'S3 bucket not configured block public access, arn: {{.arn}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_buckets\nWHERE\n  block_public_acls IS NOT TRUE\n\
    \  OR block_public_policy IS NOT TRUE\n  OR ignore_public_acls IS NOT TRUE\n \
    \ OR restrict_public_buckets IS NOT TRUE;"
- metadata:
    title: S3 bucket object traversal by acl
  name: bucket_object_traversal_by_acl
  output: 'S3 bucket object traversal by acl, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  aws_s3_bucket_grants\
    \ a2\nWHERE\n a1.selefra_id = a2.aws_s3_buckets_selefra_id\n  AND a2.grantee ::\
    \ jsonb ->> 'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'\n  AND a2.permission\
    \ IN ('READ', 'FULL_CONTROL');"
- metadata:
    title: S3 bucket object traversal by policy
  name: bucket_object_traversal_by_policy
  output: 'S3 bucket object traversal by policy, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  json_array_elements(a1.policy\
    \ :: json -> 'Statement') a2\nWHERE\n  (\n    a2 ->> 'Action' = 's3:ListBucket'\n\
    \    OR a2 ->> 'Action' = 's3:List*'\n    OR a2 ->> 'Action' = 's3:*'\n  )\n \
    \ AND a2 ->> 'Effect' = 'Allow'\n  AND (\n    a2 ->> 'Principal' = '*'\n    OR\
    \ a2 -> 'Principal' ->> 'AWS' = '*'\n  )\n  AND right(substring(a2 ->> 'Resource',\
    \ -2), 2) <> '/*' ;"
- metadata:
    title: S3 bucket policy condition
  name: bucket_policy_condition
  output: 'S3 bucket policy condition, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  json_array_elements(a1.policy\
    \ :: json -> 'Statement') a2\nWHERE\n  a2 ->> 'Condition' IS NOT NULL;"
- metadata:
    title: S3 bucket public readable
  name: bucket_publicly_readable
  output: 'S3 bucket public readable, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  json_array_elements\
    \ (a1.policy :: json -> 'Statement') a2\nWHERE\n  (\n    a2 ->> 'Action' = 's3:GetObject'\n\
    \    OR a2 ->> 'Action' = 's3:Get*'\n    OR a2 ->> 'Action' = 's3:*'\n  )\n  AND\
    \ a2 ->> 'Effect' = 'Allow'\n  AND (\n    a2 ->> 'Principal' = '*'\n    OR a2\
    \ -> 'Principal' ->> 'AWS' = '*'\n  );"
- metadata:
    title: S3 bucket public writable
  name: bucket_publicly_writeable
  output: 'S3 bucket public writable, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets a1,\n  aws_s3_bucket_grants\
    \ a2\nWHERE\n  a1.selefra_id = a2.aws_s3_buckets_selefra_id\n  AND a2.grantee\
    \ :: jsonb ->> 'URI' = 'http://acs.amazonaws.com/groups/global/AllUsers'\n  AND\
    \ a2.permission IN ('WRITE', 'FULL_CONTROL');"
- metadata:
    title: S3 storage bucket resources
  name: bucket_resources
  output: 'S3 storage bucket resources, arn: {{.arn}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_buckets;"
- metadata:
    title: S3 bucket source ip not set
  name: bucket_source_ip_not_set
  output: 'S3 bucket source ip not set, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT(a1.*)\nFROM\n  aws_s3_buckets AS a1 FULL\n  OUTER JOIN\
    \ (\n    SELECT\n      name,\n      selefra_id\n    FROM\n      aws_s3_buckets,\n\
    \      jsonb_array_elements (policy :: jsonb -> 'Statement') AS a2\n    WHERE\n\
    \      (\n        a2 ->> 'Effect' = 'Allow'\n        AND a2 -> 'Condition' ->\
    \ 'IpAddress' -> 'aws:SourceIp' IS NOT NULL\n      )\n      OR (\n        a2 ->>\
    \ 'Effect' = 'Deny'\n        AND a2 -> 'Condition' -> 'NotIpAddress' -> 'aws:SourceIp'\
    \ IS NOT NULL\n      )\n  ) AS a3 ON a1.selefra_id = a3.selefra_id\nWHERE\n  a1.name\
    \ <> a3.name\n  OR a3.name IS NULL;"
- metadata:
    title: S3 bucket versioning is disabled
  name: bucket_versioning_is_disabled
  output: 'S3 bucket versioning is disabled, arn: {{.arn}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_buckets\nWHERE\n  versioning_status IS DISTINCT\n\
    FROM\n  'Enabled';"
- metadata:
    title: MFA delete is disable
  name: mfa_delete_is_disable
  output: 'MFA delete is disable, arn: {{.arn}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_buckets\nWHERE\n  versioning_status IS DISTINCT\n\
    FROM\n  'Enabled'\n  OR versioning_mfa_delete IS DISTINCT\nFROM\n  'Enabled';"
- metadata:
    title: S3 account level public access not blocks
  name: s3_account_level_public_access_not_blocks
  output: 'S3 account level public access not blocks, account id: {{.account_id}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_accounts\nWHERE\n  public_access_block_configuration\
    \ -> 'BlockPublicAcls' = 'false'\n  OR public_access_block_configuration -> 'IgnorePublicAcls'\
    \ = 'false'\n  OR public_access_block_configuration -> 'BlockPublicPolicy' = 'false'\n\
    \  OR public_access_block_configuration -> 'RestrictPublicBuckets' = 'false';"
- metadata:
    title: S3 bucket blacklisted actions prohibited
  name: s3_bucket_blacklisted_actions_prohibited
  output: 'S3 bucket blacklisted actions prohibited, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT (a1.*)\nFROM\n  aws_s3_buckets a1,\n  json_array_elements\
    \ (a1.policy :: json -> 'Statement') a2\nWHERE\n  a2 ->> 'Action' IN (\n    's3:*',\
    \ 's3:GetBucket*', 's3:DeleteObject',\n    's3:DeleteBucketPolicy', 's3:PutBucketAcl',\n\
    \    's3:PutBucketPolicy', 's3:PutEncryptionConfiguration',\n    's3:PutObjectAcl'\n\
    \  )\n  AND a2 ->> 'Effect' = 'Allow'\n  AND (\n    a2 ->> 'Principal' = '*'\n\
    \    OR a2 -> 'Principal' ->> 'AWS' = '*'\n  );"
- metadata:
    title: S3 bucket replication disabled
  name: s3_bucket_replication_disabled
  output: 'S3 bucket replication disabled, arn: {{.arn}}'
  query: "select\nDISTINCT(aws_s3_buckets.*)\nfrom\naws_s3_buckets, JSONB_ARRAY_ELEMENTS(\n\
    \    case jsonb_typeof(replication_rules)\n    when 'array' then replication_rules\n\
    \    else '[]' end\n) as r\nwhere\nr->>'Status' is distinct from 'Enabled';"
- metadata:
    title: S3 is not protected by backup plan
  name: s3_is_not_protected_by_backup_plan
  output: 'S3 is not protected by backup plan, region: {{.region}}'
  query: "SELECT\n  *\nFROM\n  aws_backup_region_settings\nWHERE\n  resource_type_opt_in_preference\
    \ ->> 'S3' IS DISTINCT\nFROM\n  'true';"
- metadata:
    title: S3 last backup recovery point
  name: s3_last_backup_recovery_point
  output: 'S3 last backup recovery point, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT (a1.*)\nFROM\n  aws_s3_buckets a1\n  LEFT JOIN aws_backup_vault_recovery_points\
    \ a2 ON a1.arn = a2.resource_arn\nWHERE\n  a2.selefra_id IS NULL\n  OR date_part(\
    \ 'day', NOW() - a2.completion_date ) > 31;"
- metadata:
    title: S3 not default encryption kms
  name: s3_not_default_encryption_kms
  output: 'S3 not default encryption kms, arn: {{.arn}}'
  query: "with data as (\nselect\nbucket_arn\nfrom\n  aws_s3_bucket_encryption_rules,\n\
    \  jsonb_array_elements(apply_server_side_encryption_by_default -> 'Rules') as\
    \ rules\nwhere\n  rules -> 'ApplyServerSideEncryptionByDefault' ->> 'KMSMasterKeyID'\
    \ is not null\n)\nselect\nDISTINCT (b.*)\nfrom\naws_s3_buckets as b\nleft join\
    \ data as d on b.arn = d.bucket_arn\nwhere d.bucket_arn is null and b.arn is not\
    \ null and b.versioning_status = 'Enabled';"
- metadata:
    title: S3 version lifecycle policy not check
  name: s3_version_lifecycle_policy_not_check
  output: 'S3 version lifecycle policy not check, arn: {{.arn}}'
  query: "SELECT\n  DISTINCT v.*\nFROM\n  aws_s3_buckets AS v\n  LEFT JOIN aws_s3_bucket_lifecycles\
    \ AS f ON v.account_id = f.account_id\nWHERE\n  f.account_id IS NULL;"
- metadata:
    title: The target bucket for server access logging is the bucket itself
  name: the_target_bucket_for_server_access_logging_is_the_bucket_itself
  output: 'The target bucket for server access logging is the bucket itself, arn:
    {{.arn}}'
  query: "SELECT\n  *\nFROM\n  aws_s3_buckets\nWHERE\n  name = logging_target_bucket;"
